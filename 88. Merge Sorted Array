# Link: https://leetcode.com/problems/merge-sorted-array/description/?envType=study-plan-v2&envId=top-interview-150
#
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#leetcode problem:
#
#You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
# 
# Merge nums1 and nums2 into a single array sorted in non-decreasing order.
# 
# The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
# 
# 
# 
# Example 1:
# 
# Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
# Output: [1,2,2,3,5,6]
# Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
# The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
# Example 2:
# 
# Input: nums1 = [1], m = 1, nums2 = [], n = 0
# Output: [1]
# Explanation: The arrays we are merging are [1] and [].
# The result of the merge is [1].
# Example 3:
# 
# Input: nums1 = [0], m = 0, nums2 = [1], n = 1
# Output: [1]
# Explanation: The arrays we are merging are [] and [1].
# The result of the merge is [1].
# Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
# 
# 
# Constraints:
# 
# nums1.length == m + n
# nums2.length == n
# 0 <= m, n <= 200
# 1 <= m + n <= 200
# -109 <= nums1[i], nums2[j] <= 109
# 
# 
# Follow up: Can you come up with an algorithm that runs in O(m + n) time?
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def merge(self, nums1, m, nums2, n):
        person1 = m - 1
        person2 = n - 1

        while person1 >= 0 and person2 >= 0:
            if nums1[person1] > nums2[person2]:
                nums1[person1 + person2 + 1] = nums1[person1]
                person1 -= 1
            else:
                nums1[person1 + person2 + 1] = nums2[person2]
                person2 -= 1

        if person2 >= 0:
            nums1[:person2 + 1] = nums2[:person2 + 1]

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Solution breakdown:
#
# class Solution:: This line defines a class named Solution.
# def merge(self, nums1, m, nums2, n):: This line defines a method named merge that takes in four arguments: self, nums1, m, nums2, and n.
# person1 = m - 1: This line initializes a variable person1 to m - 1.
# person2 = n - 1: This line initializes a variable person2 to n - 1.
# while person1 >= 0 and person2 >= 0:: This line starts a loop that will continue as long as both person1 and person2 are greater than or equal to 0.
# if nums1[person1] > nums2[person2]:: This line checks if the value at index person1 in nums1 is greater than the value at index person2 in nums2.
# nums1[person1 + person2 + 1] = nums1[person1]: This line sets the value at index person1 + person2 + 1 in nums1 to the value at index person1 in nums1.
# person1 -= 1: This line decrements the value of person1 by 1.
# else:: This line is executed if the condition in the if statement is not met.
# nums1[person1 + person2 + 1] = nums2[person2]: This line sets the value at index person1 + person2 + 1 in nums1 to the value at index person2 in nums2.
# person2 -= 1: This line decrements the value of person2 by 1.
# if person2 >= 0:: This line checks if person2 is greater than or equal to 0.
# nums1[:person2 + 1] = nums2[:person2 + 1]: This line sets the values in nums2 from index 0 to person2 + 1 to the corresponding values in nums1 from index 0 to person2 + 1.
